package org.openstreetmap.josm.gradle.plugin.demo

import org.gradle.testkit.runner.GradleRunner
import org.junit.jupiter.api.Assertions.assertTrue
import org.junit.jupiter.api.TestInfo
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.EnumSource
import org.openstreetmap.josm.gradle.plugin.testutils.GradleProjectUtil
import java.io.File

class DemoTest {

  @Suppress("unused")
  enum class GradleVersion(val expectingSuccess: Boolean) {
    // Gradle <= 6.7 uses Kotlin 1.3.x. We can only support versions with Kotlin 1.4+ (minOrNull is required, as 1.5 prohibits min)
    GRADLE_6_7(false),
    GRADLE_6_8(true),
    GRADLE_7_2(true);

    val version = name.substring(name.indexOf('_') + 1).replace('_', '.')
  }

  @ParameterizedTest
  @EnumSource(GradleVersion::class)
  fun testDemo(gradleVersion: GradleVersion, testInfo: TestInfo) {
    println("Building demo project with Gradle ${gradleVersion.version}.")
    println("Expecting to ${if (gradleVersion.expectingSuccess) "succeed" else "fail"}!")

    val tmpDir = GradleProjectUtil.createTempSubDir(testInfo, true)
    println("build dir: ${tmpDir.absolutePath}")

    File(DemoTest::class.java.getResource("/demo").toURI()).copyRecursively(tmpDir, overwrite = false)

    GradleRunner.create().withGradleVersion(gradleVersion.version)
      .withProjectDir(tmpDir)
      .withArguments(
        "--stacktrace",
        "build",
        "compileJava_minJosm",
        "compileJava_testedJosm",
        "compileJava_latestJosm",
        "generatePot",
        "localDist",
        "shortenPoFiles",
        "listJosmVersions"
      )
      .forwardOutput()
      .withPluginClasspath()
      .apply {
        if (gradleVersion.expectingSuccess) build() else buildAndFail()
      }

    // Basic tests if the files in the build directory at least exist where we would expect them
    if (gradleVersion.expectingSuccess) {
      // Files generated by `generatePot`
      assertTrue {
        File(tmpDir, "build/i18n/pot/josm-plugin_MyAwesomePlugin.pot").exists() &&
        File(tmpDir, "build/i18n/srcFileList/josm-plugin_MyAwesomePlugin.txt").exists()
      }
      // Files generated by `dist`
      assertTrue {
        File(tmpDir, "build/dist/MyAwesomePlugin.jar").exists()
      }
      // Files generated by `localDist`
      assertTrue {
        File(tmpDir, "build/localDist/list").exists() &&
        File(tmpDir, "build/localDist/MyAwesomePlugin-dev.jar").exists()
      }
    }
  }
}
